// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: tracks.sql

package db

import (
	"context"
)

const listTracks = `-- name: ListTracks :many
SELECT
  id,
  name,
  started_at,
  ended_at,
  distance_m,
  notes
FROM tracks
ORDER BY started_at DESC
LIMIT ?
`

func (q *Queries) ListTracks(ctx context.Context, limit int64) ([]Track, error) {
	rows, err := q.db.QueryContext(ctx, listTracks, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Track
	for rows.Next() {
		var i Track
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.StartedAt,
			&i.EndedAt,
			&i.DistanceM,
			&i.Notes,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const trackBBox = `-- name: TrackBBox :one
SELECT
  MIN(lon) AS min_x,
  MIN(lat) AS min_y,
  MAX(lon) AS max_x,
  MAX(lat) AS max_y
FROM positions
WHERE track_id = ?
`

type TrackBBoxRow struct {
	MinX interface{} `json:"min_x"`
	MinY interface{} `json:"min_y"`
	MaxX interface{} `json:"max_x"`
	MaxY interface{} `json:"max_y"`
}

func (q *Queries) TrackBBox(ctx context.Context, trackID int64) (TrackBBoxRow, error) {
	row := q.db.QueryRowContext(ctx, trackBBox, trackID)
	var i TrackBBoxRow
	err := row.Scan(
		&i.MinX,
		&i.MinY,
		&i.MaxX,
		&i.MaxY,
	)
	return i, err
}

const trackPositions = `-- name: TrackPositions :many
SELECT
  id,
  track_id,
  t,
  lon,
  lat,
  sog_ms,
  cog_rad,
  src,
  qual
FROM positions
WHERE track_id = ?
ORDER BY t ASC
`

func (q *Queries) TrackPositions(ctx context.Context, trackID int64) ([]Position, error) {
	rows, err := q.db.QueryContext(ctx, trackPositions, trackID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Position
	for rows.Next() {
		var i Position
		if err := rows.Scan(
			&i.ID,
			&i.TrackID,
			&i.T,
			&i.Lon,
			&i.Lat,
			&i.SogMs,
			&i.CogRad,
			&i.Src,
			&i.Qual,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
